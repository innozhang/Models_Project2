//
// 17-651: FSP model of a simple infusion pump
//

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked


//
// Model Power
//
const Unplugged = 0
const Off = 1
const On = 2
range ACSetting = Unplugged .. On

AC = A[Unplugged],
A[s:ACSetting] =
	(when (s==Unplugged) plug_in -> A[Off]
	|when (s==Off)   unplug -> A[Unplugged]
	|when (s==Off)   turn_on -> A[On]
	|when (s==On)    unplug -> A[Unplugged]
	|when (s==On)	turn_off -> A[Off]
	|when (s==On)    supply -> A[s]
	|when (s==On)    charge -> A[s]).
//
// Battery Model
//
// Battery capacity
//
const EmptyCap = 0
const LowCap = 1
const MedCap = 2
const HighCap = 3
range BatteryCapT = EmptyCap .. HighCap

Battery = B[HighCap],
B[c:BatteryCapT] =
	(when (c<=LowCap) notify -> B[c] // notify when capacity is low
	|when (c<HighCap)  charge -> B[c + 1] // charge when there is capacity
	|when (c>EmptyCap) discharge -> B[c - 1]). // discharge when it is not empty
||POWER = (AC || Battery).





//
// Model User Interface
//

USERINTERFACE = (turn_on->SETUP[ParamsNotSet][LineUnlocked]),

SETUP[params:ParamsStateT][lineLock:LineLockStateT] = 
(
    unplug -> USERINTERFACE
    |
    turn_off -> USERINTERFACE
    |
    when (params == ParamsNotSet && lineLock == LineUnlocked)
        set_rate -> enter_value ->
            (press_set -> SETUP[ParamsSet][lineLock]
             |
             press_cancel -> SETUP[ParamsNotSet][lineLock])
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        clear_rate -> SETUP[ParamsNotSet][lineLock]
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        connect_set -> purge_air -> lock_line -> SETUP[params][LineLocked]
    |
    when (lineLock == LineLocked)
        confirm_settings -> CONFIRMED
    |
    when (lineLock == LineLocked)
        erase_and_unlock_line -> SETUP[params][LineUnlocked]
),

CONFIRMED = (
	unplug -> USERINTERFACE
	|
	turn_off -> USERINTERFACE
	|
	change_settings -> SETUP[ParamsSet][LineLocked]).

//
//Pump in infusion mode:
//
LINE = (confirm_settings -> INFUSION),
INFUSION =
(
	unplug -> LINE | turn_off -> LINE
	|
	change_settings -> LINE
	|
	dispense_main_med_flow -> INFUSION // Normal operation
	|
	flow_blocked -> BLOCKED
	|
	flow_pinched -> PINCHED
),

BLOCKED= (
	unplug -> LINE
	|
	turn_off -> LINE
	|
	flow_unblocked -> INFUSION
),

PINCHED= (
	unplug -> LINE
	|
	turn_off -> LINE
	|
	flow_unpinched -> INFUSION
).

// 
// Model the alarm
//
ALARM = (flow_blocked -> sound_alarm ->INFUSION_BLOCKED[AlarmActivated]),
INFUSION_BLOCKED[alarm:AlarmStateT] = (
	unplug->ALARM
	|
	turn_off->ALARM
	|
	when (alarm == AlarmActivated)
		sound_alarm->INFUSION_BLOCKED[alarm]
	|
	when (alarm == AlarmActivated)
		silence_alarm->INFUSION_BLOCKED[AlarmSilenced]
	|
	flow_unblocked->ALARM
).


||PUMP = (POWER || USERINTERFACE || l[i:1..2]:LINE || l[i:1..2]::ALARM).



