//
// 17-651: FSP model of a simple infusion pump
//

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked


//
// AC(Alternative Current) Model
//
const Unplugged = 0
const Off = 1
const On = 2
range ACSetting = Unplugged .. On

AC = A[Unplugged],
A[s:ACSetting] =
	(when (s==Unplugged) plug_in -> A[Off]
	|when (s==Off)   unplug -> A[Unplugged]
	|when (s==Off)   turn_on -> A[On]
	|when (s==On)    unplug -> A[Unplugged]
	|when (s==On)	turn_off -> A[Off]
	|when (s==On)    supply -> A[s]
	|when (s==On)    charge -> A[s]).

//
// Battery Model
//
// Battery capacity
//
range BatteryCapT = 0 .. 100

BATTERY = B[100],
B[c:BatteryCapT] =
	(when (c<=10) notify -> B[c] // notify when capacity is low
	|when (c<100)  charge -> B[c + 1] // charge when there is capacity
	|when (c>0) discharge -> B[c - 1] // discharge when it is not empty
	|when (c==0) empty -> B[c]).

//
// Model the User Interface
//

const NoPower = 0
const HasPower  = 1

range PowerStateT = NoPower .. HasPower

const NotConfirmed = 0
const Confirmed = 1
range ConfirmStateT = NotConfirmed .. Confirmed

USERINTERFACE = SETUP[ParamsNotSet][LineUnlocked][NotConfirmed][NoPower],
SETUP[params:ParamsStateT][lineLock:LineLockStateT][confirmState:ConfirmStateT][powerState:PowerStateT] =
	(when (powerState == NoPower) supply -> SETUP[params][lineLock][confirmState][HasPower]
	|when (powerState == NoPower) discharge -> SETUP[params][lineLock][confirmState][HasPower]

	|empty -> SETUP[params][lineLock][confirmState][NoPower]
	|unplug -> SETUP[params][lineLock][confirmState][NoPower]
	|turn_off -> SETUP[params][lineLock][confirmState][NoPower]

	|when (powerState == HasPower &&
		   lineLock == LineUnlocked &&
		   params == ParamsNotSet)
		set_rate->enter_value->
			(press_set -> SETUP[ParamsSet][lineLock][confirmState][NoPower]
			|press_cancel -> SETUP[ParamsNotSet][lineLock][confirmState][NoPower])
	|when (powerState == HasPower &&
		   params == ParamsSet &&
		   lineLock == LineUnlocked)
		clear_rate -> SETUP[ParamsNotSet][lineLock][confirmState][NoPower]
	|when (params == ParamsSet &&
		   lineLock == LineUnlocked)
		connect_purge_lock -> SETUP[params][LineLocked][confirmState][powerState]
	|when (powerState == HasPower &&
		   lineLock == LineLocked)
		erase_and_unlock_line->SETUP[params][LineUnlocked][confirmState][NoPower]
	|when (powerState == HasPower &&
		   lineLock == LineLocked)
		confirm_settings -> SETUP[params][lineLock][Confirmed][NoPower]
	|when (powerState == HasPower &&
		   confirmState == Confirmed)
		change_settings -> SETUP[params][lineLock][NotConfirmed][NoPower]
).

||PUMP = (AC || BATTERY || USERINTERFACE)<<{supply}.

menu USERCONTROLMENU = {plug_in, unplug, turn_on, turn_off, 
						set_rate, enter_value, press_set, press_cancel, clear_rate,
						connect_purge_lock, erase_and_unlock_line, confirm_settings, change_settings}



//
//Pump in infusion mode:
//
const MedMax = 3
range MedCap = 0 .. MedMax
LINE = (confirm_settings -> FILLIN),
FILLIN = (fill_in -> INFUSION[MedMax]),

INFUSION[c:MedCap] =
	(unplug -> LINE | turn_off -> LINE
	|change_settings -> LINE
	|when (c>0) dispense_main_med_flow -> INFUSION[c - 1] // Normal operation
	|when (c==0) empty -> FILLIN
	|flow_blocked -> BLOCKED[c]
	|flow_pinched -> PINCHED[c]),

BLOCKED[c:MedCap] = 
	(unplug -> LINE | turn_off -> LINE
	|flow_unblocked -> INFUSION[c]),

PINCHED[c:MedCap] = 
	(unplug -> LINE | turn_off -> LINE
	|flow_unpinched -> INFUSION[c]).

// 
// Model the alarm
//
ALARM = (flow_blocked -> sound_alarm ->INFUSION_BLOCKED[AlarmActivated]),
INFUSION_BLOCKED[alarm:AlarmStateT] = (
	unplug->ALARM
	|
	turn_off->ALARM
	|
	when (alarm == AlarmActivated)
		sound_alarm->INFUSION_BLOCKED[alarm]
	|
	when (alarm == AlarmActivated)
		silence_alarm->INFUSION_BLOCKED[AlarmSilenced]
	|
	flow_unblocked->ALARM
).


||PUMP = (POWER || USERINTERFACE || l[i:1..2]:LINE || l[i:1..2]::ALARM).



