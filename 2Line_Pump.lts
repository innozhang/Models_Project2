//
// 17-651: FSP model of a simple infusion pump
//

//======================
// Constants and Ranges
//======================

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

//
// AC(Alternative Current) Model
//
const Unplugged = 0
const Off = 1
const On = 2
range ACSetting = Unplugged .. On

AC = A[Unplugged],
A[s:ACSetting] =
	// Unplugged case
	(when (s==Unplugged) plug_in -> A[Off]
	//|when (s==Off)   unplug -> A[Unplugged]
	|when (s==Off)   ac_on -> A[On]
	// On cases
	|when (s==On)    unplug -> A[Unplugged]
	|when (s==On)	turn_off -> A[Off]
	|when (s==On)    supply -> A[s]
	|when (s==On)    charge -> A[s]).

//
// Battery Model
//
// Battery capacity
//
const Capacity = 3
const AlarmThreshold = 2
range BatteryCapT = 0 .. Capacity

range BSetting = Off .. On

BATTERY = B[Capacity][Off],
B[c:BatteryCapT][s:BSetting] =
	(when (s==Off) battery_on -> B[c][On]
	|when (s==On) battery_off -> B[c][Off]
	
	|when (c<Capacity)   charge -> B[c + 1][s]
	|when (s==On && c>0) discharge -> B[c - 1][s]

	|when (c==0) empty -> B[c][s]).

//
// Model the User Interface
//

const NotConfirmed = 0
const Confirmed = 1
range ConfirmStateT = NotConfirmed .. Confirmed


USERINTERFACE = (ac_on->SETUP[ParamsNotSet]
							 [LineUnlocked]
							 [NotConfirmed]
							 [UnitUnlocked]
				|battery_on->SETUP[ParamsNotSet]
								  [LineUnlocked]
								  [NotConfirmed]
								  [UnitUnlocked]),

SETUP[params:ParamsStateT]
	 [lineLock:LineLockStateT]
	 [confirmState:ConfirmStateT]
	 [unitLock:UnitLockStateT] =
	(//empty -> USERINTERFACE
	 turn_off -> USERINTERFACE
	//|unplug -> USERINTERFACE
	|battery_off -> USERINTERFACE

	|when (lineLock == LineUnlocked &&
		   params == ParamsNotSet)
		set_rate->enter_value->
			(press_set -> SETUP[ParamsSet]
							   [lineLock]
							   [confirmState]
							   [unitLock]
			|press_cancel -> SETUP[ParamsNotSet]
								  [lineLock]
								  [confirmState]
								  [unitLock])
	|when (params == ParamsSet &&
		   lineLock == LineUnlocked)
		clear_rate -> SETUP[ParamsNotSet][lineLock][confirmState][unitLock]
	|when (params == ParamsSet &&
		   lineLock == LineUnlocked)
		connect_purge_lock -> SETUP[params][LineLocked][confirmState][unitLock]
	|when (lineLock == LineLocked &&
		   confirmState == NotConfirmed)
		erase_and_unlock_line->SETUP[params][LineUnlocked][confirmState][unitLock]
	|when (lineLock == LineLocked)
		confirm_settings -> SETUP[params][lineLock][Confirmed][unitLock]
	|when (confirmState == Confirmed &&
		   unitLock == UnitUnlocked)
		change_settings -> SETUP[params][lineLock][NotConfirmed][unitLock]
	|when (confirmState == Confirmed &&
		   unitLock == UnitUnlocked)
		lock_unit -> SETUP[params][lineLock][confirmState][UnitLocked]
	|when (confirmState == Confirmed &&
		   unitLock == UnitLocked)
		unlock_unit -> SETUP[params][lineLock][confirmState][UnitUnlocked]
).

//
//Pump in infusion mode:
//
const MedMax = 1
range MedCap = 0 .. MedMax

const NoPower = 0
const HasPower = 1
range PowerStateT = NoPower .. HasPower

LINE = (confirm_settings -> FILLIN),

FILLIN = 
	(turn_off -> LINE
	|battery_off -> LINE
	|change_settings -> LINE
	|fill_in -> INFUSION[MedMax][NoPower]),

INFUSION[c:MedCap][p:PowerStateT] =
	(turn_off -> LINE

	|when (p==NoPower) supply -> INFUSION[c][HasPower]
	|when (p==NoPower) discharge -> INFUSION[c][HasPower] //TODO: concurrency

	|when (c>0 && p==HasPower) dispense_main_med_flow -> INFUSION[c - 1][NoPower] // Normal operation
	|when (c==0) empty_line -> FILLIN
	|when (c==0) finish -> LINE

	|flow_blocked -> BLOCKED[c]
	|flow_pinched -> PINCHED[c]),

BLOCKED[c:MedCap] = 
	(turn_off -> LINE
	|flow_unblocked -> INFUSION[c][NoPower]),

PINCHED[c:MedCap] = 
	(turn_off -> LINE
	|flow_unpinched -> INFUSION[c][NoPower]).

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

const Blocked = 0
const Pinched = 1
const Empty = 2

range AlarmTypeT = Blocked .. Empty

// 
// Model the alarm
//
ALARM = 
	(flow_blocked -> sound_alarm -> INFUSION_ALARM[AlarmActivated][Blocked]
	|flow_pinched -> sound_alarm -> INFUSION_ALARM[AlarmActivated][Pinched]
	|empty_line -> sound_alarm -> INFUSION_ALARM[AlarmActivated][Empty]),

INFUSION_ALARM[alarm:AlarmStateT][type:AlarmTypeT] = 
	(unplug -> ALARM
	|turn_off -> ALARM
	|when (alarm == AlarmActivated) sound_alarm -> INFUSION_ALARM[alarm][type]
	|when (alarm == AlarmActivated) silence_alarm -> INFUSION_ALARM[AlarmSilenced][type]
	|when (type == Blocked) flow_unblocked -> ALARM
	|when (type == Pinched) flow_unpinched -> ALARM
	|when (type == Empty) fill_in -> ALARM).


//||PUMP = (POWER || USERINTERFACE || l[i:1..2]:LINE || l[i:1..2]::ALARM).
||PUMP = (AC || 
		  BATTERY || 
		  USERINTERFACE ||
		  LINE ||
		  ALARM)<<{supply}.

// 1. The pump cannot start pumping without the operator first confirming the settings on the pump
//fluent PUMP_START = <{}, {}>
//fluent SETTINGS_CONFIRMED = <{}>

// 2. Electrical power（AC） can fail at any time
fluent ELEC_FAIL = <{turn_off, unplug}, {ac_on}>
assert FAILANYTIME = [](<>ELEC_FAIL)

// 3. If the backup battery power fails, pumping will not occur on any line

// 4. It is always possible to resume pumping after a failure



