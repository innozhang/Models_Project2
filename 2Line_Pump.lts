/*
 * Project 2 Concurrency - Infusion Pump
 * Team 6
 */

//
// Model the power
//
// Mode: Battery or AC
const BatteryMode = 0
const ACMode = 1
range PMode = BatteryMode .. ACMode // Power has two modes: with AC or Battery

// State: On or Off
const Off = 0
const On = 1
range PSettings = Off .. On // Does power work

// Battery capacity: three categorical numbers
const EmBattery = 0
const LoBattery = 1
const HiBattery = 2
range Capacity = EmBattery .. HiBattery // The capacity of the battery

POWER = P[BatteryMode][Off][HiBattery],
P[m:PMode][s:PSettings][c:Capacity] =
	// On/Off state of the power by active action 
	(when (s==Off) power_on -> P[m][On][c]
	|when (s==On) power_off -> P[m][Off][c]
	// On/Off state passively sync with other processes
	|when (s==Off) power_off -> P[m][s][c]
	|when (s==On) power_on -> P[m][s][c]
	// Switch between two modes
	|when (m==BatteryMode) plug_in -> P[ACMode][s][c]
	|when (m==ACMode) unplug -> P[BatteryMode][s][c]
	// In ACMode, charge the battery when necessary
	// Assumption 1: battery will be charged to full by one step
	|when (m==ACMode && c<=LoBattery) charge -> P[m][s][HiBattery]
	// In BatteryMode, consume battery when necessary
	// Assumption 2: battery will discharge in steps
	|when (m==BatteryMode && c==HiBattery && s==On) discharge -> P[m][s][LoBattery]
	|when (m==BatteryMode && c==LoBattery && s==On) discharge -> P[m][s][EmBattery]
	|when (m==BatteryMode && c==EmBattery && s==On) empty-> P[m][Off][c]
)@{plug_in,unplug,power_off,power_on}. // Encapsulate AC and battery to the concept of POWER


//
// Model the User Interface
//

// Whether the pump parameters are set
const ParamsNotSet = 2
const ParamsSet    = 3
range ParamsStateT = ParamsNotSet .. ParamsSet

// Whether the line is locked into the panel
const LineUnlocked = 4
const LineLocked   = 5
range LineLockStateT = LineUnlocked .. LineLocked

// Whether the user interface is confirmed
const NotConfirmed = 0
const Confirmed = 1
range ConfirmStateT = NotConfirmed .. Confirmed

// Whether the pump unit(keypad) is locked
const UnitUnlocked = 6
const UnitLocked   = 7
range UnitLockStateT = UnitUnlocked .. UnitLocked

// The quantity of the medication
const EmptyMed = 0
const UpperMed = 1 // Assumption 3: only one medication is set to avoid exponential states
range MedCapT = EmptyMed .. UpperMed

 // power_on starts the UI
USERINTERFACE = (power_on->SETUP[ParamsNotSet][EmptyMed][LineUnlocked][NotConfirmed][UnitUnlocked]),

SETUP[params:ParamsStateT][med:MedCapT][lineLock:LineLockStateT][confirmState:ConfirmStateT][unitLock:UnitLockStateT] =
	// If power_off, goes back
	(power_off->USERINTERFACE
	|when (med == EmptyMed)
		// sync with line to get the needed value
		set_rate->enter_value[m:MedCapT]->SETUP[params][m][lineLock][confirmState][unitLock]
	// Set or unset the params
	|when (params == ParamsNotSet && med != EmptyMed)
		press_set -> SETUP[ParamsSet][med][lineLock][confirmState][unitLock]
	|when (params == ParamsNotSet && med != EmptyMed)
		press_cancel -> SETUP[ParamsNotSet][EmptyMed][lineLock][confirmState][unitLock]
	// Clear the already-set params
	|when (params == ParamsSet && lineLock == LineUnlocked)
		clear_rate -> SETUP[ParamsNotSet][EmptyMed][lineLock][confirmState][unitLock]
	// Prepare the line and lock it
	|when (params == ParamsSet && lineLock == LineUnlocked)
		connect_purge_lock -> SETUP[params][med][LineLocked][confirmState][unitLock]
	// Unlock the line
	|when (lineLock == LineLocked && confirmState == NotConfirmed)
		erase_and_unlock_line->SETUP[params][med][LineUnlocked][confirmState][unitLock]
	// Confirm all the settings
	|when (lineLock == LineLocked)
		confirm_settings -> SETUP[params][med][lineLock][Confirmed][unitLock]
	// Change the settings
	|when (confirmState == Confirmed && unitLock == UnitUnlocked)
		change_settings -> SETUP[params][med][lineLock][NotConfirmed][unitLock]
	// Lock the keypad
	|when (confirmState == Confirmed && unitLock == UnitUnlocked)
		lock_unit -> SETUP[params][med][lineLock][confirmState][UnitLocked]
	// Unlock the keypad
	|when (confirmState == Confirmed && unitLock == UnitLocked)
		unlock_unit -> SETUP[params][med][lineLock][confirmState][UnitUnlocked]
	// If finish, wait for another dose
	|finish -> USERINTERFACE
).


//
// Model the line
//

// The volume of the medication connected to the line
const LowerVol = 0
const UpperVol = 1
range VolT = LowerVol .. UpperVol

// After the confirmation, the infusion can begin
LINE = L[EmptyMed],
	L[m:MedCapT] =
	(// sync with the user interface
	enter_value[nm:MedCapT] -> L[nm]
	|power_off -> L[m]
	|confirm_settings -> INFUSION[m][UpperVol] // Assumption 4: the volume is 1 initially
	),

INFUSION[m:MedCapT][v:VolT] =
	(power_off -> LINE
	|change_settings -> LINE
	// One normal pump operation
	|when (m > 0 && v > 0) dispense -> INFUSION[m - 1][v - 1] // Assumption 5: the rate is 1/per dispense
	// If the remaining volume is insufficient, trigger the alarm or resolve
	// it by filling more liquid
	|when (m > 0 && v == 0) fill_in -> INFUSION[m][UpperVol]
	|when (m > 0 && v == 0) empty_line -> INFUSION[m][v]
	// When the required medication is dispensed, finish
	|when (m == 0) finish -> LINE
	
	// Accidents: flow_blocked, flow_pinched
	|flow_blocked -> BLOCKED[m][v]
	|flow_pinched -> PINCHED[m][v]),

BLOCKED[m:MedCapT][v:VolT] = 
	(power_off -> LINE
	|flow_unblocked -> INFUSION[m][v]),

PINCHED[m:MedCapT][v:VolT] = 
	(power_off -> LINE
	|flow_unpinched -> INFUSION[m][v]).

//
// Model of the Alarm
//

// Whether the alarm is active
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive
range AlarmStateT = AlarmActivated .. AlarmSilenced

// The causes of the alarm
const Blocked = 0
const Pinched = 1
const Empty = 2
range AlarmTypeT = Blocked .. Empty

ALARM =
	// They will activate the alarm
	(flow_blocked -> sound_alarm -> INFUSION_ALARM[AlarmActivated][Blocked]
	|flow_pinched ->sound_alarm -> INFUSION_ALARM[AlarmActivated][Pinched]
	|empty_line ->sound_alarm -> INFUSION_ALARM[AlarmActivated][Empty]
	|power_off -> ALARM), // Power can be off

INFUSION_ALARM[alarm:AlarmStateT][type:AlarmTypeT] = 
	// AlarmActivated cases
	(when (alarm == AlarmActivated) sound_alarm -> INFUSION_ALARM[alarm][type]
	|when (alarm == AlarmActivated) silence_alarm -> INFUSION_ALARM[AlarmSilenced][type]
	// Alarm events are resolved
	|when (type == Blocked) flow_unblocked -> ALARM
	|when (type == Pinched) flow_unpinched -> ALARM
	|when (type == Empty) fill_in -> ALARM
	// Power can be off
	|power_off -> ALARM).

//
// Model a SEMAPHORE to protect the Alarm, the shared resource
//
const Max = 3
range Int = 0..Max
SEMAPHORE(N=1) = SEMA[N], // the N is num of semaphore, it is 1 in default
SEMA[v:Int]    = ({flow_unblocked,flow_unpinched,fill_in}->SEMA[v+1] // conditions to release
                 |when(v>0) {flow_blocked,flow_pinched,empty_line}->SEMA[v-1] // conditions to acquire
				 |power_off->SEMA[N] // restart semaphore after power_off
                 ).

//
// Compose all into a whole PUMP system
//

// The two lines
const First = 1
const Second = 2
range LineT = First .. Second

||PUMP = (POWER ||
		  l[LineT]:USERINTERFACE || // Assumption 6: Each line has its own User Interface
		  l[LineT]:LINE ||
		  l[LineT]:ALARM ||
		  // POWER has impact on all lines, relabeling
		  {l[LineT]}::SEMAPHORE(1))/{power_off/l[First].power_off, power_off/l[Second].power_off,
						            power_on/l[First].power_on, power_on/l[Second].power_on}.

/*-------Property-------*/

// 1. The pump cannot start pumping without the operator first confirming 
// the settings on the pump - SAFETY
fluent PUMP_START[i:LineT] = <{l[i].dispense}, dummy>
fluent SETTINGS_CONFIRMED[i:LineT] = <{l[i].confirm_settings}, dummy>
assert CONFIRMSTART = forall[i:LineT] (!PUMP_START[i] U SETTINGS_CONFIRMED[i])

// 2. Electrical power（AC） can fail at any time - SAFETY & LIVENESS
fluent ELEC_FAIL = <{unplug}, {plug_in}>
assert FAILANYTIME = [](<>ELEC_FAIL)

// 3. If the backup battery power fails, pumping will not occur on any line - LIVENESS
fluent POWER_FAIL = <power_off, power_on>
assert BACKUPFAILNOPUMP = forall[i:LineT] []!(l[i].dispense && POWER_FAIL)

// 4. It is always possible to resume pumping after a failure - LIVENESS
fluent LINE_FAIL[i:LineT] = <{l[i].flow_blocked, l[i].flow_pinched, l[i].empty_line}, 
							 {l[i].flow_unblocked, l[i].flow_unpinched, l[i].fill_in}>
assert RESUME = forall[i:LineT] []((LINE_FAIL[i] || POWER_FAIL) -> <>l[i].dispense)

// 5. An alarm will sound on any line failure (blockage, pinching, 
// empty fluid, or whatever failures you model). - LIVENESS
assert SOUND = forall[i:LineT] [](LINE_FAIL[i] -> <>l[i].sound_alarm)

// 6. In the absence of errors the pump will continue to pump until the treatment is finished. - SAFETY
assert PUMPTILLEMPTY = forall[i:LineT] (!(LINE_FAIL[i] || POWER_FAIL) -> <>(l[i].dispense U l[i].finish))

// 7. The system never deadlocks. - SAFETY
// It can be checked in the LTSA software

// 8. Variables (rate & value) cannot be changed if unit is locked - SAFETY
fluent UNIT_LOCK[i:LineT] = <l[i].lock_unit, {l[i].unlock_unit, power_on}>
assert LOCKVAR = forall[m:MedCapT] forall[i:LineT] 
		!<>(UNIT_LOCK[i] && {l[i].set_rate, l[i].clear_rate, l[i].enter_value[m]})

// 9. At all times in any execution, the alarm can at most sound for the failure of one line
// for the reason there is only one alarm - SAFETY
fluent ALARM_SOUND[i:LineT] = <{l[i].flow_blocked,l[i].flow_pinched,l[i].empty_line},
							   {l[i].flow_unblocked,l[i].flow_unpinched,l[i].fill_in,power_off}>
assert NOTALARMTOGETHER = []!(ALARM_SOUND[First] && ALARM_SOUND[Second])
