
//
// Model the power
//

const BatteryMode = 0
const ACMode = 1
range PMode = BatteryMode .. ACMode
const Off = 0
const On = 1
range PSettings = Off .. On

const EmBattery = 0
const LoBattery = 1
const HiBattery = 2
range Capacity = EmBattery .. HiBattery

POWER = P[BatteryMode][Off][HiBattery],
P[m:PMode][s:PSettings][c:Capacity] = 
	(when (s==Off) turn_on -> P[m][On][c]
	|when (s==On) turn_off -> P[m][Off][c]
	|when (m==BatteryMode) plug_in -> P[ACMode][s][c]
	|when (m==ACMode) unplug -> P[BatteryMode][s][c]

	|when (m==ACMode && c<=LoBattery) charge -> P[m][s][HiBattery]
	|when (m==BatteryMode && c==HiBattery && s==On) discharge -> P[m][s][LoBattery]
	|when (m==BatteryMode && c==LoBattery && s==On) discharge -> P[m][Off][EmBattery]
	|when (m==BatteryMode && c==EmBattery && s==On) skip -> P[m][Off][c]

	|when (s==On) power_on -> P[m][s][c]
	|when (s==Off) power_off -> P[m][s][c]
).


//
// Model the User Interface
//

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set
range ParamsStateT = ParamsNotSet .. ParamsSet
//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel
range LineLockStateT = LineUnlocked .. LineLocked


const NotConfirmed = 0
const Confirmed = 1
range ConfirmStateT = NotConfirmed .. Confirmed//

// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked
range UnitLockStateT = UnitUnlocked .. UnitLocked

USERINTERFACE = (power_on->SETUP[ParamsNotSet][LineUnlocked][NotConfirmed][UnitUnlocked]),

SETUP[params:ParamsStateT][lineLock:LineLockStateT][confirmState:ConfirmStateT][unitLock:UnitLockStateT] =
	(power_off->USERINTERFACE 

	|when (lineLock == LineUnlocked && params == ParamsNotSet)
		set_rate->enter_value->(press_set -> SETUP[ParamsSet][lineLock][confirmState][unitLock]
			                   |press_cancel -> SETUP[ParamsNotSet][lineLock][confirmState][unitLock])
	|when (params == ParamsSet && lineLock == LineUnlocked)
		clear_rate -> SETUP[ParamsNotSet][lineLock][confirmState][unitLock]
	|when (params == ParamsSet && lineLock == LineUnlocked)
		connect_purge_lock -> SETUP[params][LineLocked][confirmState][unitLock]
	|when (lineLock == LineLocked && confirmState == NotConfirmed)
		erase_and_unlock_line->SETUP[params][LineUnlocked][confirmState][unitLock]
	|when (lineLock == LineLocked)
		confirm_settings -> SETUP[params][lineLock][Confirmed][unitLock]
	|when (confirmState == Confirmed && unitLock == UnitUnlocked)
		change_settings -> SETUP[params][lineLock][NotConfirmed][unitLock]
	|when (confirmState == Confirmed && unitLock == UnitUnlocked)
		lock_unit -> SETUP[params][lineLock][confirmState][UnitLocked]
	|when (confirmState == Confirmed && unitLock == UnitLocked)
		unlock_unit -> SETUP[params][lineLock][confirmState][UnitUnlocked]
).


//
// Model the line
//
const MedMax = 1
range MedCap = 0 .. MedMax

LINE = (confirm_settings -> INFUSION[MedMax]),

INFUSION[c:MedCap] =
	(power_off -> LINE
	|change_settings -> LINE
	|when (c>0) dispense_main_med_flow -> INFUSION[c - 1] // Normal operation
	
	|when (c==0) empty_line -> INFUSION[c]
	|when (c==0) fill_in -> INFUSION[MedMax]
	|when (c==0) finish -> LINE

	|flow_blocked -> BLOCKED[c]
	|flow_pinched -> PINCHED[c]),

BLOCKED[c:MedCap] = 
	(power_off -> LINE
	|flow_unblocked -> INFUSION[c]),

PINCHED[c:MedCap] = 
	(power_off -> LINE
	|flow_unpinched -> INFUSION[c]).

//
// Model of the Alarm
//

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

const Blocked = 0
const Pinched = 1
const Empty = 2

range AlarmTypeT = Blocked .. Empty

// 
// Model the alarm
//
ALARM = 
	(flow_blocked -> sound_alarm -> INFUSION_ALARM[AlarmActivated][Blocked]
	|flow_pinched -> sound_alarm -> INFUSION_ALARM[AlarmActivated][Pinched]
	|empty_line -> sound_alarm -> INFUSION_ALARM[AlarmActivated][Empty]),

INFUSION_ALARM[alarm:AlarmStateT][type:AlarmTypeT] = 
	(when (alarm == AlarmActivated) sound_alarm -> INFUSION_ALARM[alarm][type]
	|when (alarm == AlarmActivated) silence_alarm -> INFUSION_ALARM[AlarmSilenced][type]
	
	|when (type == Blocked) flow_unblocked -> ALARM
	|when (type == Pinched) flow_unpinched -> ALARM
	|when (type == Empty) fill_in -> ALARM).

const Max = 3
range Int = 0..Max
SEMAPHORE(N=0) = SEMA[N],
SEMA[v:Int]    = ({flow_unblocked,flow_unpinched,fill_in}->SEMA[v+1]
                 |when(v>0) {flow_blocked,flow_pinched,empty_line}->SEMA[v-1]
                 ).

||PUMP = (POWER ||
		  l[1..2]:USERINTERFACE ||
		  l[1..2]:LINE ||
		  l[1..2]:ALARM ||
		  {l[1..2]}::SEMAPHORE(1))/{power_off/l[1].power_off, power_off/l[2].power_off,
						          power_on/l[1].power_on, power_on/l[2].power_on}.


/*----Property-------*/


// 1. The pump cannot start pumping without the operator first confirming the settings on the pump
//fluent PUMP_START = <{}, {}>
//fluent SETTINGS_CONFIRMED = <{}>

// 2. Electrical power（AC） can fail at any time
fluent ELEC_FAIL = <>
assert FAILANYTIME = [](<>ELEC_FAIL)

// 3. If the backup battery power fails, pumping will not occur on any line

// 4. It is always possible to resume pumping after a failure



